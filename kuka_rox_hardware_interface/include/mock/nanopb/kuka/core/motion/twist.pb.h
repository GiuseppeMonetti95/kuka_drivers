/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_KUKA_CORE_MOTION_KUKA_CORE_MOTION_TWIST_PB_H_INCLUDED
#define PB_KUKA_CORE_MOTION_KUKA_CORE_MOTION_TWIST_PB_H_INCLUDED
#include <pb.h>
#include <nanopb/kuka/core/geometry/vector.pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Represents a velocity in 3D space. */
typedef struct _kuka_core_motion_Twist { 
    /* The linear part of the velocity. */
    bool has_linear;
    kuka_core_geometry_Vector linear; 
    /* The angular part of the velocity. */
    bool has_angular;
    kuka_core_geometry_Vector angular; 
} kuka_core_motion_Twist;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define kuka_core_motion_Twist_init_default      {false, kuka_core_geometry_Vector_init_default, false, kuka_core_geometry_Vector_init_default}
#define kuka_core_motion_Twist_init_zero         {false, kuka_core_geometry_Vector_init_zero, false, kuka_core_geometry_Vector_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define kuka_core_motion_Twist_linear_tag        1
#define kuka_core_motion_Twist_angular_tag       2

/* Struct field encoding specification for nanopb */
#define kuka_core_motion_Twist_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  linear,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  angular,           2)
#define kuka_core_motion_Twist_CALLBACK NULL
#define kuka_core_motion_Twist_DEFAULT NULL
#define kuka_core_motion_Twist_linear_MSGTYPE kuka_core_geometry_Vector
#define kuka_core_motion_Twist_angular_MSGTYPE kuka_core_geometry_Vector

extern const pb_msgdesc_t kuka_core_motion_Twist_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define kuka_core_motion_Twist_fields &kuka_core_motion_Twist_msg

/* Maximum encoded size of messages (where known) */
#define kuka_core_motion_Twist_size              58

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
